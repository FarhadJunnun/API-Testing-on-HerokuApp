{
	"info": {
		"_postman_id": "3e0ebb76-740f-438f-81f4-969954c1d665",
		"name": "herokuapp.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26808822"
	},
	"item": [
		{
			"name": "Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var Data = pm.response.json()\r",
							"pm.environment.set(\"bookingid\",Data.bookingid)\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var FirstName= pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(FirstName)\r",
							"pm.environment.set(\"FirstName\",FirstName)\r",
							"\r",
							"var LastName= pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(LastName)\r",
							"pm.environment.set(\"LastName\",LastName)\r",
							"\r",
							"var totalprice= pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"//console.log(totalprice)\r",
							"pm.environment.set(\"totalprice\",parseInt(totalprice))\r",
							"\r",
							"const moment = require('moment')\r",
							"const today = moment()\r",
							"const today1 = moment()\r",
							"//console.log(today1.add(5,'day').format(\"YYYY-MM-DD\"))\r",
							"pm.environment.set(\"checkin\", today.format(\"YYYY-MM-DD\"))\r",
							"pm.environment.set(\"checkout\", today1.add(5,'day').format(\"YYYY-MM-DD\"))\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{FirstName}}\",\r\n\t\"lastname\" : \"{{LastName}}\",\r\n\t\"totalprice\" : {{totalprice}},\r\n\t\"depositpaid\" : true,\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkin}}\",\r\n    \t\"checkout\" : \"{{checkout}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"Breakfast\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var status_code = pm.response.code\r",
							"console.log(status_code)\r",
							"\r",
							"switch(status_code){\r",
							"        case 200:\r",
							"            var Data = pm.response.json()\r",
							"\r",
							"            pm.test(\"First Name Validation\", function(){\r",
							"                pm.expect(Data.firstname).to.eql(pm.environment.get(\"FirstName\"))\r",
							"            })\r",
							"            pm.test(\"Last Name Validation\", function(){\r",
							"                pm.expect(Data.lastname).to.eql(pm.environment.get(\"LastName\"))\r",
							"            })\r",
							"            pm.test(\"Total Price Validation\", function(){\r",
							"                pm.expect(Data.totalprice).to.eql(pm.environment.get(\"totalprice\"));\r",
							"            })\r",
							"            pm.test(\"Deposit Paid Validation\", function(){\r",
							"                pm.expect(Data.depositpaid).to.eql(true)\r",
							"            })\r",
							"            pm.test(\"Check In Validation\", function(){\r",
							"                pm.expect(Data.bookingdates.checkin).to.eql(pm.environment.get(\"checkin\"))\r",
							"            })\r",
							"            pm.test(\"Check Out Validation\", function(){\r",
							"                pm.expect(Data.bookingdates.checkout).to.eql(pm.environment.get(\"checkout\"))\r",
							"            })\r",
							"            pm.test(\"Additional Needs Validation\", function(){\r",
							"                pm.expect(Data.additionalneeds).to.eql(\"Breakfast\")\r",
							"            })\r",
							"        break;\r",
							"\r",
							"        case 400:\r",
							"        pm.test(\"Bad Request....\")\r",
							"        break;\r",
							"\r",
							"        case 403:\r",
							"        pm.test(\"Forbidden....\")\r",
							"        break;\r",
							"\r",
							"        case 404:\r",
							"        pm.test(\"Not Found....\")\r",
							"        break;\r",
							"\r",
							"        case 500:\r",
							"        pm.test(\"Internal Server Error....\")\r",
							"        break;     \r",
							"        \r",
							"}\r",
							"     \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var Token = pm.response.json()\r",
							"pm.environment.set(\"token\", Token.token)\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(202);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var FirstName= pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(FirstName)\r",
							"pm.environment.set(\"FirstName\",FirstName)\r",
							"\r",
							"var LastName= pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(LastName)\r",
							"pm.environment.set(\"LastName\",LastName)\r",
							"\r",
							"var totalprice= pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"//console.log(totalprice)\r",
							"pm.environment.set(\"totalprice\",parseInt(totalprice))\r",
							"\r",
							"const moment = require('moment')\r",
							"const today = moment()\r",
							"const today1 = moment()\r",
							"//console.log(today1.add(5,'day').format(\"YYYY-MM-DD\"))\r",
							"pm.environment.set(\"checkin\", today.subtract(1,'M').format(\"YYYY-MM-DD\"))\r",
							"pm.environment.set(\"checkout\", today1.add(5,'day').format(\"YYYY-MM-DD\"))\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"{{FirstName}}\",\r\n\t\"lastname\" : \"{{LastName}}\",\r\n\t\"totalprice\" : {{totalprice}},\r\n\t\"depositpaid\" : true,\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkin}}\",\r\n    \t\"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\": \"Kacchi\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var status_code = pm.response.code\r",
							"console.log(status_code)\r",
							"\r",
							"switch(status_code){\r",
							"        case 200:\r",
							"            var Data = pm.response.json()\r",
							"\r",
							"            pm.test(\"First Name Validation\", function(){\r",
							"                pm.expect(Data.firstname).to.eql(pm.environment.get(\"FirstName\"))\r",
							"            })\r",
							"            pm.test(\"Last Name Validation\", function(){\r",
							"                pm.expect(Data.lastname).to.eql(pm.environment.get(\"LastName\"))\r",
							"            })\r",
							"            pm.test(\"Total Price Validation\", function(){\r",
							"                pm.expect(Data.totalprice).to.eql(pm.environment.get(\"totalprice\"));\r",
							"            })\r",
							"            pm.test(\"Deposit Paid Validation\", function(){\r",
							"                pm.expect(Data.depositpaid).to.eql(true)\r",
							"            })\r",
							"            pm.test(\"Check In Validation\", function(){\r",
							"                pm.expect(Data.bookingdates.checkin).to.eql(pm.environment.get(\"checkin\"))\r",
							"            })\r",
							"            pm.test(\"Check Out Validation\", function(){\r",
							"                pm.expect(Data.bookingdates.checkout).to.eql(pm.environment.get(\"checkout\"))\r",
							"            })\r",
							"            pm.test(\"Additional Needs Validation\", function(){\r",
							"                pm.expect(Data.additionalneeds).to.eql(\"Kacchi\")\r",
							"            })\r",
							"            break;\r",
							"\r",
							"        case 400:\r",
							"        pm.test(\"Bad Request....\")\r",
							"        break;\r",
							"\r",
							"        case 403:\r",
							"        pm.test(\"Forbidden....\")\r",
							"        break;\r",
							"\r",
							"        case 404:\r",
							"        pm.test(\"Not Found....\")\r",
							"        break;\r",
							"\r",
							"        case 500:\r",
							"        pm.test(\"Internal Server Error....\")\r",
							"        break;     \r",
							"        \r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update_Single_data",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"Farhad Hossain\"\r\n\t\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get_Patch_Updated_Data",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete_Booking",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		}
	]
}